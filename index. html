<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Andra Romosan</title>
  <style>
    body {
      background-color: #0d0d0d;
      color: #e6e6e6;
      font-family: "Fira Code", monospace;
      margin: 0;
      line-height: 1.6;
    }
    header {
      background: linear-gradient(90deg, #1a1aff, #8000ff, #00cc66);
      padding: 2rem;
      text-align: center;
      color: white;
    }
    header h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    section {
      padding: 2rem;
      max-width: 900px;
      margin: auto;
    }
    h2 {
      color: #66ffcc;
      border-bottom: 2px solid #333;
      padding-bottom: 0.5rem;
    }
    .vocab {
      background: #1a1a1a;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
    }
    img {
      max-width: 100%;
      border-radius: 10px;
      margin: 1rem 0;
      display: block;
    }
    iframe {
      width: 100%;
      height: 400px;
      border: none;
      border-radius: 10px;
      margin-top: 1rem;
    }
    footer {
      background-color: #111;
      color: #888;
      text-align: center;
      padding: 1rem;
      margin-top: 2rem;
    }
    /* Glitter canvas */
    #glitterCanvas {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 9999;
    }
  </style>
</head>
<body>
  <header>
    <h1>Andra Romosan</h1>
    <p>Future Software Engineer</p>
  </header>

  <section>
    <h2>My Goal</h2>
    <p>After high school, I want to <strong>study software engineering</strong> and build creative, impactful technology.</p>
  </section>

  <section>
    <h2>Unit 1 & 2 Vocabulary</h2>
    <div class="vocab"><strong>Bit:</strong> A binary digit, either 0 or 1.</div>
    <div class="vocab"><strong>Byte:</strong> A sequence of 8 bits.</div>
    <div class="vocab"><strong>Roundoff:</strong> Error when not enough bits are available to represent a number with full precision.</div>
    <div class="vocab"><strong>Analog data:</strong> Values that change smoothly, rather than in steps (like pitch and volume).</div>
    <div class="vocab"><strong>Lossless:</strong> Compression that preserves all data and allows full recovery.</div>
    <div class="vocab"><strong>Lossy:</strong> Compression that discards some data, making full recovery impossible.</div>
    <div class="vocab"><strong>Metadata:</strong> Data about data, like information about a file.</div>
  </section>

  <section>
    <h2>Visuals</h2>
    <img src="https://upload.wikimedia.org/wikipedia/commons/4/4e/Binary_code.png" alt="Binary code example">
    <img src="https://upload.wikimedia.org/wikipedia/commons/3/3a/Analog_vs_Digital.png" alt="Analog vs digital signals">
  </section>

  <section>
    <h2>How the Internet Works</h2>
    <p>Here’s a quick video that explains how the internet works:</p>
    <iframe src="https://www.youtube.com/embed/x3c1ih2NJEg" allowfullscreen></iframe>
  </section>

  <footer>
    <p>© 2025 Andra Romosan | Built with ❤️ and curiosity</p>
  </footer>

  <!-- Glitter Canvas -->
  <canvas id="glitterCanvas"></canvas>

  <script>
    const canvas = document.getElementById("glitterCanvas");
    const ctx = canvas.getContext("2d");
    let glitter = [];
    let active = false;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener("resize", resizeCanvas);

    class Particle {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 4 + 2;
        this.speedY = Math.random() * 2 + 1;
        this.speedX = (Math.random() - 0.5) * 1;
        this.opacity = Math.random();
      }
      update() {
        this.y += this.speedY;
        this.x += this.speedX;
        this.opacity -= 0.01;
      }
      draw() {
        ctx.fillStyle = `rgba(255,192,203,${this.opacity})`; // pink glitter
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fill();
      }
    }

    function handleGlitter() {
      if (!active) return;
      for (let i = 0; i < 5; i++) {
        glitter.push(new Particle(Math.random() * canvas.width, 0));
      }
      for (let i = 0; i < glitter.length; i++) {
        glitter[i].update();
        glitter[i].draw();
        if (glitter[i].opacity <= 0) {
          glitter.splice(i, 1);
          i--;
        }
      }
    }

    function animate() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      handleGlitter();
      requestAnimationFrame(animate);
    }
    animate();

    window.addEventListener("scroll", () => {
      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 2) {
        active = true; // start glitter when bottom reached
      }
    });
  </script>
</body>
</html>
